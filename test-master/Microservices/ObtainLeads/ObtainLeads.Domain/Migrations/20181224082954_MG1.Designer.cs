// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObtainLeads.Domain.Models;

namespace ObtainLeads.Domain.Migrations
{
    [DbContext(typeof(ObtainLeadsContext))]
    [Migration("20181224082954_MG1")]
    partial class MG1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ObtainLeads.Domain.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.DebitObligation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DebtCommitment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LeadId");

                    b.Property<string>("MonthlyCommitment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NameOfCreditor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("TotalAmountOutstanding")
                        .HasColumnType("numeric(18, 0)");

                    b.HasKey("Id");

                    b.ToTable("DebitObligation");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.DeclarationByConsumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("LeadId");

                    b.Property<string>("Signed")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("SignedAt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("DeclarationByConsumer");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("DeductionTypeId");

                    b.HasKey("Id");

                    b.ToTable("Deduction");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.DeductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DeductionType");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployerName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("LeadsId");

                    b.HasKey("Id");

                    b.HasIndex("LeadsId");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.EmployerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressTypeId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("EmployerId");

                    b.Property<string>("Line1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Line2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Zip")
                        .HasColumnName("zip");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerAddress");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.EmployerContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("EmployerId");

                    b.Property<string>("WorkNo")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerContactDetail");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.IncomeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("IncomeType");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InsertedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sent")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressTypeId");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LeadsId");

                    b.Property<string>("Line1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Line2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Zip")
                        .HasColumnName("zip");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("LeadsId");

                    b.ToTable("LeadAddress");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HomeNo")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("LeadsId");

                    b.HasKey("Id");

                    b.HasIndex("LeadsId");

                    b.ToTable("LeadContactDetail");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeductionId");

                    b.Property<int?>("DeductionTypeId");

                    b.Property<int?>("LeadId");

                    b.HasKey("Id");

                    b.HasIndex("DeductionId");

                    b.HasIndex("DeductionTypeId");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadDeduction");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("IncomeTypeId");

                    b.Property<int?>("LeadId");

                    b.HasKey("Id");

                    b.HasIndex("IncomeTypeId");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadIncome");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadMonthlyCommitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeadId");

                    b.Property<int>("MonthlyCommitmentId");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("MonthlyCommitmentId");

                    b.ToTable("LeadMonthlyCommitment");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadObligation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeadId");

                    b.Property<int>("ObligationId");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("ObligationId");

                    b.ToTable("LeadObligations");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.MonthlyCommitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commitment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("LeadId");

                    b.Property<decimal>("MonthlyExpense")
                        .HasColumnType("numeric(18, 0)");

                    b.HasKey("Id");

                    b.ToTable("MonthlyCommitment");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.DeclarationByConsumer", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Lead")
                        .WithMany("DeclarationByConsumer")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__Declarati__LeadI__0D7A0286");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.Employer", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Leads")
                        .WithMany("Employer")
                        .HasForeignKey("LeadsId")
                        .HasConstraintName("FK__Employer__LeadsI__6383C8BA");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.EmployerAddress", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.AddressType", "AddressType")
                        .WithMany("EmployerAddress")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK__EmployerA__Addre__6754599E");

                    b.HasOne("ObtainLeads.Domain.Models.Employer", "Employer")
                        .WithMany("EmployerAddress")
                        .HasForeignKey("EmployerId")
                        .HasConstraintName("FK__EmployerA__Emplo__66603565");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.EmployerContactDetail", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Employer", "Employer")
                        .WithMany("EmployerContactDetail")
                        .HasForeignKey("EmployerId")
                        .HasConstraintName("FK__EmployerC__Emplo__6A30C649");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadAddress", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.AddressType", "AddressType")
                        .WithMany("LeadAddress")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK__LeadAddre__Addre__73BA3083");

                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Leads")
                        .WithMany("LeadAddress")
                        .HasForeignKey("LeadsId")
                        .HasConstraintName("FK__LeadAddre__Leads__72C60C4A");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadContactDetail", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Leads")
                        .WithMany("LeadContactDetails")
                        .HasForeignKey("LeadsId")
                        .HasConstraintName("FK__LeadConta__Leads__6FE99F9F");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadDeduction", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Deduction", "Deduction")
                        .WithMany()
                        .HasForeignKey("DeductionId");

                    b.HasOne("ObtainLeads.Domain.Models.DeductionType")
                        .WithMany("LeadDeduction")
                        .HasForeignKey("DeductionTypeId");

                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Lead")
                        .WithMany("LeadDeduction")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__LeadDeduc__LeadI__7E37BEF6");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadIncome", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.IncomeType", "IncomeType")
                        .WithMany("LeadIncome")
                        .HasForeignKey("IncomeTypeId")
                        .HasConstraintName("FK__LeadIncom__Incom__04E4BC85");

                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Lead")
                        .WithMany("LeadIncome")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("FK__LeadIncom__LeadI__03F0984C");
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadMonthlyCommitment", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Lead")
                        .WithMany("LeadMonthlyCommitment")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ObtainLeads.Domain.Models.MonthlyCommitment", "MonthlyCommitment")
                        .WithMany()
                        .HasForeignKey("MonthlyCommitmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObtainLeads.Domain.Models.LeadObligation", b =>
                {
                    b.HasOne("ObtainLeads.Domain.Models.Lead", "Lead")
                        .WithMany("LeadObligation")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ObtainLeads.Domain.Models.DebitObligation", "DebitObligation")
                        .WithMany()
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
